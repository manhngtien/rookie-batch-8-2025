name: $(Build.SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger: none

pr:
  branches:
    include:
      - main
      - dev

  paths:
    include:
      - 'AssetManagement/AssetManagement.Application/*'
      - 'AssetManagement/AssetManagement.Core/*'
      - 'AssetManagement/AssetManagement.Infrastructure/*'
      - 'AssetManagement/AssetManagement.Api/*'
      - 'AssetManagement/Tests/*'
      - './azure-pipelines/pr-pipeline.yml'

variables:
  - group: BackendSecrets
  - name: tag
    value: '$(Build.BuildId)'
  - name: workingDir
    value: 'AssetManagement/'
  - name: solution
    value: 'AssetManagement/AssetManagement.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'

pool:
  name: Default
  demands:
    - Agent.Name -equals $(AGENT_NAME)

stages:
  - stage: Build
    displayName: 'CI: Build'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK 9.0.x'
            inputs:
              packageType: 'sdk'
              version: '9.x'
          - task: DotNetCoreCLI@2
            displayName: 'Restore Packages'
            inputs:
              command: 'restore'
              projects: '$(solution)'
              feedsToUse: 'select'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet list package --vulnerable'
            inputs:
              command: 'custom'
              custom: 'list'
              arguments: 'package --vulnerable'
              workingDirectory: $(workingDir)
          - task: DotNetCoreCLI@2
            displayName: 'Build Solution'
            inputs:
              command: 'build'
              projects: '$(solution)'
              arguments: '--configuration $(buildConfiguration) --no-restore'
          - task: DotNetCoreCLI@2
            displayName: 'Run ArchTests, IntegrationTests, UnitTests'
            inputs:
              command: 'test'
              projects: 'AssetManagement/Tests/**/*.csproj'
              arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
            env:
              InfrastructureSettings__ConnectionStringsOption__Default: $(APP_CONNECTION_STRING)
          - task: reportgenerator@5
            displayName: Generate Test Report
            inputs:
              reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
              targetdir: '$(Build.Repository.LocalPath)/CoverageResults' 
              assemblyfilters: '+*.Api;+*.Application;+*.Core;+*.Infrastructure'
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.Repository.LocalPath)/CoverageResults/Cobertura.xml'